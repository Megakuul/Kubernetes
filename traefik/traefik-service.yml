kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-deployment
  namespace: example-ns
  labels:
    app: traefik
spec:
  replicas: 3
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik-account
      containers:
        - name: traefik
          image: traefik:latest
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
          args:
            - --api.insecure
            - --providers.kubernetesingress
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
            - --entrypoints.websecure.http.tls
            - --log.level=debug
            - --providers.kubernetescrd
            - --providers.kubernetescrd.namespaces=example-ns
          ports:
            - name: web
              containerPort: 80
            - name: websecure
              containerPort: 443
            - name: dashboard
              containerPort: 8080
---
# Create integrated loadbalancer (e.g. with metallb)
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-service
  namespace: example-ns
  annotations:
    metallb.universe.tf/address-pool: example-metallb-pool
spec:
  type: LoadBalancer
  ports:
    - name: web
      targetPort: web
      port: 80
    - name: websecure
      targetPort: websecure
      port: 443
    - name: dashboard
      targetPort: dashboard
      port: 8080
  selector:
    app: traefik
---
# Or alternatively create a nodeport and use a external loadbalancer
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-service
  namespace: example-ns
spec:
  type: NodePort
  ports:
    - name: web
      targetPort: web
      port: 80
      nodePort: 30100
    - name: websecure
      targetPort: websecure
      port: 443
      nodePort: 30101
    - name: dashboard
      targetPort: dashboard
      port: 8080
      nodePort: 30102
  selector:
    app: traefik